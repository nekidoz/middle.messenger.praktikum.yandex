type Hints = {
    format: string | null,
    isNull: string | null,
    tooShort: string | null,
    tooLong: string | null,
    notExact: string | null,
};

const LOGIN_HINTS: Hints = {
    format: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ª–∞—Ç–∏–Ω—Å–∫–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ',
    isNull: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω',
    tooShort: null,
    tooLong: null,
    notExact: null,
};

const PASSWORD_HINTS: Hints = {
    format: '–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤',
    isNull: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å',
    tooShort: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤',
    tooLong: null,
    notExact: null,
};

const EMAIL_HINTS: Hints = {
    format: '–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤: +-_.\' –∏ –±—ã—Ç—å –≤ –¥–æ–º–µ–Ω–µ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è',
    isNull: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
    tooShort: null,
    tooLong: null,
    notExact: null,
};

const NAME_HINTS: Hints = {
    format: '–ò–º–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤',
    isNull: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è',
    tooShort: null,
    tooLong: null,
    notExact: null,
};

const PHONE_HINTS: Hints = {
    format: '–ù—É –≤—ã —Å–∞–º–∏ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω üôÑ',
    isNull: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
    tooShort: null,
    tooLong: null,
    notExact: null,
};

export type ValidateBundle = Record<string, string | null>;

export default class Validate {
    private static isValid(value: string, required: boolean, validationRegExp: RegExp, hints: Hints,
        minLength: number | null = null, 
        maxLength: number | null = null, 
        exactLength:  number | null = null)
        : [boolean, string | null] {

        if (!value) {
            if (required) {
                return [false, hints.isNull];
            } else {
                return [true, null];
            }
        } else if (minLength && value.length < minLength) {
            return [false, hints.tooShort];
        } else if (maxLength && value.length > maxLength) {
            return [false, hints.tooLong];
        } else if (exactLength && value.length !== exactLength) {
            return [false, hints.notExact];
        } else if (!validationRegExp.test(value)) {
            return [false, hints.format];
        } else {
            return [true, null];
        };
    }

    static isLogin(value: string, required: boolean = false): [boolean, string | null] {
        return this.isValid(value, required, /^[a-zA-Z]\w*$/, LOGIN_HINTS);
    }

    static isPassword(value: string, required: boolean = false): [boolean, string | null] {
        return this.isValid(value, required, /^\S+$/, PASSWORD_HINTS, 3);
    }

    static isEmail(value: string, required: boolean = false): [boolean, string | null] {
        return this.isValid(value, required, /^[a-zA-Z0-9][a-zA-Z0-9\+\-\_\.\']*@[a-z0-9][a-z0-9\-\.]*\.[a-zA-Z]$/, EMAIL_HINTS);
    }

    static isName(value: string, required: boolean = false): [boolean, string | null] {
        return this.isValid(value, required, /^[a-zA-Z–∞-—è–ê-–Ø][a-zA-Z–∞-—è–ê-–Ø ]*$/, NAME_HINTS);
    }

    static isPhone(value: string, required: boolean = false): [boolean, string | null] {
        return this.isValid(value, required, /^[\+]?[0-9]{0,3}[ ]?[(]?[0-9]{3}[)]?[- ]?[0-9]{3}[- ]?[0-9]{4,6}$/im, PHONE_HINTS);
    }

    static validate(key: string, value: string): [boolean, string | null] {
        switch(key) {
            case 'login':
                return Validate.isLogin(value, true);
            case 'password':
            case 'repeat_password':
                return Validate.isPassword(value, true);
            case 'oldPassword':
            case 'newPassword':
            case 'repeatNewPassword':
                return Validate.isPassword(value, false);
            case 'email':
                return Validate.isEmail(value, true);
            case 'first_name':
            case 'display_name':
                return Validate.isName(value, true);
            case 'second_name':
                return Validate.isName(value, false);
            case 'phone':
                return Validate.isPhone(value, false);
            case 'avatar':
                return [true, null];
            default:
                return [false, `Validating ${key} not implemented.`];
        }
    }
}
